import { NextRequest, NextResponse } from 'next/server';
import { RoomServiceClient } from 'livekit-server-sdk';

const LIVEKIT_API_KEY = process.env.LIVEKIT_API_KEY!;
const LIVEKIT_API_SECRET = process.env.LIVEKIT_API_SECRET!;
const LIVEKIT_URL = process.env.LIVEKIT_URL!;

export async function POST(request: NextRequest) {
    try {
        const { roomName } = await request.json();

        if (!roomName) {
            return NextResponse.json(
                { error: 'Thi·∫øu t√™n ph√≤ng h·ªçp' },
                { status: 400 }
            );
        }

        console.log('üîç Checking if room exists:', roomName);

        // T·∫°o room service client
        const roomService = new RoomServiceClient(LIVEKIT_URL, LIVEKIT_API_KEY, LIVEKIT_API_SECRET);

        try {
            // Ki·ªÉm tra xem room c√≥ t·ªìn t·∫°i v√† active kh√¥ng
            const rooms = await roomService.listRooms([roomName]);

            let roomExists = false;
            let participantCount = 0;
            let roomInfo = null;

            if (rooms.length > 0) {
                const room = rooms[0];
                roomExists = true;
                participantCount = room.numParticipants;
                roomInfo = {
                    name: room.name,
                    participantCount: room.numParticipants,
                    creationTime: room.creationTime,
                    metadata: room.metadata
                };

                console.log('‚úÖ Room found:', roomInfo);
            } else {
                // N·∫øu room ch∆∞a t·ªìn t·∫°i, LiveKit s·∫Ω t·ª± ƒë·ªông t·∫°o khi c√≥ participant ƒë·∫ßu ti√™n join
                console.log('üìù Room does not exist yet, will be created on first join');
                roomExists = true; // Cho ph√©p join v√¨ LiveKit s·∫Ω t·ª± t·∫°o
            }

            return NextResponse.json({
                exists: roomExists,
                roomInfo,
                canJoin: true,
                message: roomExists && participantCount > 0
                    ? `Ph√≤ng ƒëang c√≥ ${participantCount} ng∆∞·ªùi tham gia`
                    : 'Ph√≤ng h·ªçp s·∫µn s√†ng ƒë·ªÉ tham gia'
            });

        } catch (roomError) {
            // N·∫øu API tr·∫£ v·ªÅ l·ªói, c√≥ th·ªÉ room ch∆∞a t·ªìn t·∫°i
            // Nh∆∞ng v·ªõi LiveKit, room s·∫Ω ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông khi c√≥ ng∆∞·ªùi join
            console.log('‚ö†Ô∏è Room check failed, but allowing join (auto-create):', roomError);

            return NextResponse.json({
                exists: false,
                roomInfo: null,
                canJoin: true,
                message: 'Ph√≤ng h·ªçp s·∫Ω ƒë∆∞·ª£c t·∫°o khi b·∫°n tham gia'
            });
        }

    } catch (error) {
        console.error('‚ùå Error checking room:', error);
        return NextResponse.json(
            {
                error: 'Kh√¥ng th·ªÉ ki·ªÉm tra ph√≤ng h·ªçp',
                details: error instanceof Error ? error.message : 'Unknown error'
            },
            { status: 500 }
        );
    }
}