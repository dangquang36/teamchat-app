import { NextRequest, NextResponse } from 'next/server';
import { RoomServiceClient } from 'livekit-server-sdk';

const LIVEKIT_API_KEY = process.env.LIVEKIT_API_KEY!;
const LIVEKIT_API_SECRET = process.env.LIVEKIT_API_SECRET!;
const LIVEKIT_URL = process.env.LIVEKIT_URL!;

export async function POST(request: NextRequest) {
    try {
        const { roomName } = await request.json();

        if (!roomName) {
            return NextResponse.json(
                { error: 'Thi·∫øu t√™n ph√≤ng h·ªçp' },
                { status: 400 }
            );
        }

        console.log('üîç Checking if room exists:', roomName);

        // T·∫°o room service client
        const roomService = new RoomServiceClient(LIVEKIT_URL, LIVEKIT_API_KEY, LIVEKIT_API_SECRET);

        try {
            // Ki·ªÉm tra xem room c√≥ t·ªìn t·∫°i v√† active kh√¥ng
            const rooms = await roomService.listRooms([roomName]);

            if (rooms.length > 0) {
                const room = rooms[0];
                const roomInfo = {
                    name: room.name,
                    participantCount: room.numParticipants,
                    creationTime: room.creationTime,
                    metadata: room.metadata
                };

                console.log('‚úÖ Room found:', roomInfo);

                // Ch·ªâ cho ph√©p join n·∫øu c√≥ √≠t nh·∫•t 1 ng∆∞·ªùi trong ph√≤ng
                // Ho·∫∑c ph√≤ng v·ª´a ƒë∆∞·ª£c t·∫°o (trong v√≤ng 1 ph√∫t)
                const now = Date.now();
                const roomCreatedTime = Number(room.creationTime) / 1000000; // Convert nanoseconds to milliseconds
                const timeSinceCreation = now - roomCreatedTime;
                const oneMinute = 60 * 1000;

                const canJoin = room.numParticipants > 0 || timeSinceCreation < oneMinute;

                return NextResponse.json({
                    exists: true,
                    roomInfo,
                    canJoin,
                    message: room.numParticipants > 0
                        ? `Ph√≤ng ƒëang c√≥ ${room.numParticipants} ng∆∞·ªùi tham gia`
                        : canJoin
                            ? 'Ph√≤ng v·ª´a ƒë∆∞·ª£c t·∫°o, c√≥ th·ªÉ tham gia'
                            : 'Ph√≤ng ch∆∞a c√≥ ai tham gia'
                });

            } else {
                // Room kh√¥ng t·ªìn t·∫°i
                console.log('‚ùå Room not found');

                return NextResponse.json({
                    exists: false,
                    roomInfo: null,
                    canJoin: false,
                    message: 'Ph√≤ng h·ªçp kh√¥ng t·ªìn t·∫°i'
                });
            }

        } catch (roomError) {
            console.log('‚ùå Room check failed:', roomError);

            return NextResponse.json({
                exists: false,
                roomInfo: null,
                canJoin: false,
                message: 'Ph√≤ng h·ªçp kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o'
            });
        }

    } catch (error) {
        console.error('‚ùå Error checking room:', error);
        return NextResponse.json(
            {
                error: 'Kh√¥ng th·ªÉ ki·ªÉm tra ph√≤ng h·ªçp',
                details: error instanceof Error ? error.message : 'Unknown error'
            },
            { status: 500 }
        );
    }
}