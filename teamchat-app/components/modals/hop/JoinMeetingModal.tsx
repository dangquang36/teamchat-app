"use client";

import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Loader2, Link, Users, Clock, AlertCircle } from "lucide-react";

interface JoinMeetingModalProps {
    isOpen: boolean;
    onClose: () => void;
    onJoinRoom: (roomId: string) => void;
}

export function JoinMeetingModal({ isOpen, onClose, onJoinRoom }: JoinMeetingModalProps) {
    const [roomId, setRoomId] = useState("");
    const [isJoining, setIsJoining] = useState(false);
    const [error, setError] = useState("");

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        if (!roomId.trim()) {
            setError("Vui l√≤ng nh·∫≠p ID cu·ªôc h·ªçp");
            return;
        }

        setIsJoining(true);
        setError("");

        try {
            const cleanRoomId = roomId.trim();

            // Ki·ªÉm tra xem ph√≤ng c√≥ t·ªìn t·∫°i v√† active kh√¥ng
            const response = await fetch('/api/livekit/check-room', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ roomName: cleanRoomId })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Kh√¥ng th·ªÉ ki·ªÉm tra ph√≤ng h·ªçp');
            }

            const roomData = await response.json();

            // Ki·ªÉm tra xem ph√≤ng c√≥ t·ªìn t·∫°i v√† c√≥ ng∆∞·ªùi tham gia kh√¥ng
            if (!roomData.exists) {
                setError(`Ph√≤ng h·ªçp "${cleanRoomId}" kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i ID ho·∫∑c li√™n h·ªá ng∆∞·ªùi t·∫°o cu·ªôc h·ªçp.`);
                return;
            }

            // N·∫øu ph√≤ng t·ªìn t·∫°i nh∆∞ng ch∆∞a c√≥ ai tham gia
            if (roomData.roomInfo && roomData.roomInfo.participantCount === 0) {
                setError(`Ph√≤ng h·ªçp "${cleanRoomId}" ch∆∞a c√≥ ai tham gia. Vui l√≤ng ƒë·ª£i ng∆∞·ªùi t·∫°o cu·ªôc h·ªçp b·∫Øt ƒë·∫ßu tr∆∞·ªõc.`);
                return;
            }

            // N·∫øu t·∫•t c·∫£ ƒëi·ªÅu ki·ªán ƒë·ªÅu OK, tham gia ph√≤ng
            onJoinRoom(cleanRoomId);
            onClose();
            setRoomId("");

        } catch (err) {
            console.error('Error joining room:', err);
            setError(err instanceof Error ? err.message : 'Kh√¥ng th·ªÉ tham gia cu·ªôc h·ªçp');
        } finally {
            setIsJoining(false);
        }
    };

    const handleClose = () => {
        if (!isJoining) {
            setRoomId("");
            setError("");
            onClose();
        }
    };

    const handleRoomIdChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setRoomId(e.target.value);
        if (error) setError("");
    };

    return (
        <Dialog open={isOpen} onOpenChange={handleClose}>
            <DialogContent className="sm:max-w-md">
                <DialogHeader>
                    <DialogTitle className="flex items-center gap-2">
                        <Link className="h-5 w-5 text-blue-500" />
                        Tham gia cu·ªôc h·ªçp
                    </DialogTitle>
                </DialogHeader>

                <form onSubmit={handleSubmit} className="space-y-6">
                    <div className="space-y-2">
                        <Label htmlFor="roomId">ID ho·∫∑c t√™n ph√≤ng cu·ªôc h·ªçp</Label>
                        <Input
                            id="roomId"
                            type="text"
                            placeholder="V√≠ d·ª•: hop-team-meeting-abc123"
                            value={roomId}
                            onChange={handleRoomIdChange}
                            disabled={isJoining}
                            className={error ? "border-red-500 focus:border-red-500" : ""}
                        />
                        {error && (
                            <div className="flex items-start gap-2 p-3 bg-red-50 dark:bg-red-950/20 border border-red-200 dark:border-red-800 rounded-lg">
                                <AlertCircle className="h-4 w-4 text-red-500 mt-0.5 flex-shrink-0" />
                                <p className="text-sm text-red-600 dark:text-red-400">{error}</p>
                            </div>
                        )}
                    </div>

                    {/* Info section */}
                    <div className="bg-blue-50 dark:bg-blue-950/20 p-4 rounded-lg border border-blue-200 dark:border-blue-800">
                        <h4 className="font-medium text-blue-900 dark:text-blue-100 mb-2">
                            L∆∞u √Ω khi tham gia
                        </h4>
                        <div className="space-y-2 text-sm text-blue-700 dark:text-blue-300">
                            <div className="flex items-center gap-2">
                                <Users className="h-4 w-4" />
                                <span>Ph√≤ng h·ªçp ph·∫£i ƒë∆∞·ª£c t·∫°o b·ªüi ng∆∞·ªùi kh√°c tr∆∞·ªõc</span>
                            </div>
                            <div className="flex items-center gap-2">
                                <Clock className="h-4 w-4" />
                                <span>ID ph√≤ng ph·∫£i ch√≠nh x√°c 100%</span>
                            </div>
                        </div>
                    </div>

                    {/* Action buttons */}
                    <div className="flex gap-3 justify-end">
                        <Button
                            type="button"
                            variant="outline"
                            onClick={handleClose}
                            disabled={isJoining}
                        >
                            H·ªßy
                        </Button>
                        <Button
                            type="submit"
                            disabled={isJoining || !roomId.trim()}
                            className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
                        >
                            {isJoining ? (
                                <>
                                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                                    ƒêang ki·ªÉm tra...
                                </>
                            ) : (
                                <>
                                    <Link className="h-4 w-4 mr-2" />
                                    Tham gia ngay
                                </>
                            )}
                        </Button>
                    </div>
                </form>

                {/* Additional help */}
                <div className="pt-4 border-t">
                    <p className="text-xs text-gray-500 dark:text-gray-400">
                        üí° <strong>M·∫πo:</strong> Ch·ªâ c√≥ th·ªÉ tham gia v√†o ph√≤ng ƒë√£ ƒë∆∞·ª£c t·∫°o v√† ƒëang ho·∫°t ƒë·ªông. H√£y ch·∫Øc ch·∫Øn b·∫°n c√≥ ID ch√≠nh x√°c t·ª´ ng∆∞·ªùi t·ªï ch·ª©c.
                    </p>
                </div>
            </DialogContent>
        </Dialog>
    );
}