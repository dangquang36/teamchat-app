import { useState, useEffect, useRef } from 'react';
import { Room, RemoteParticipant, LocalParticipant, ConnectionState } from 'livekit-client';
import { Socket } from 'socket.io-client';

export interface CallData {
    callerId: string;
    receiverId: string;
    callerName: string;
    roomName: string;
}

export type CallStatus = 'idle' | 'calling' | 'ringing' | 'connected' | 'rejected' | 'ended' | 'connecting' | 'timeout' | 'busy' | 'unavailable';

export const useCall = (socket: Socket | null, currentUserId: string) => {
    const [room, setRoom] = useState<Room | null>(null);
    const [isInCall, setIsInCall] = useState(false);
    const [incomingCall, setIncomingCall] = useState<CallData | null>(null);
    const [callStatus, setCallStatus] = useState<CallStatus>('idle');
    const [localParticipant, setLocalParticipant] = useState<LocalParticipant | null>(null);
    const [remoteParticipants, setRemoteParticipants] = useState<RemoteParticipant[]>([]);
    const [connectionState, setConnectionState] = useState<ConnectionState>(ConnectionState.Disconnected);
    const [autoEndMessage, setAutoEndMessage] = useState<string | null>(null);
    const [callEndReason, setCallEndReason] = useState<string | null>(null);

    const roomRef = useRef<Room | null>(null);
    const autoEndTimerRef = useRef<NodeJS.Timeout | null>(null);
    const callStartTimeRef = useRef<number | null>(null);

    // H√†m b·∫Øt ƒë·∫ßu timer t·ª± ƒë·ªông t·∫Øt cu·ªôc g·ªçi (2 ph√∫t)
    const startAutoEndTimer = () => {
        console.log('üïê Starting auto-end timer (2 minutes)...');

        if (autoEndTimerRef.current) {
            clearTimeout(autoEndTimerRef.current);
        }

        autoEndTimerRef.current = setTimeout(() => {
            console.log('‚è∞ Auto-ending call after 2 minutes of waiting...');
            setAutoEndMessage('Cu·ªôc g·ªçi ƒë√£ t·ª± ƒë·ªông k·∫øt th√∫c sau 2 ph√∫t ch·ªù ƒë·ª£i');
            setCallEndReason('Kh√¥ng c√≥ ng∆∞·ªùi tham gia trong 2 ph√∫t');
            endCall('timeout');
        }, 2 * 60 * 1000); // 2 ph√∫t
    };

    // H√†m d·ª´ng timer t·ª± ƒë·ªông t·∫Øt cu·ªôc g·ªçi
    const stopAutoEndTimer = () => {
        console.log('üõë Stopping auto-end timer...');
        if (autoEndTimerRef.current) {
            clearTimeout(autoEndTimerRef.current);
            autoEndTimerRef.current = null;
        }
    };

    // H√†m ki·ªÉm tra v√† qu·∫£n l√Ω timer d·ª±a tr√™n s·ªë l∆∞·ª£ng participants
    const manageAutoEndTimer = (remoteCount: number) => {
        if (remoteCount === 0) {
            // Kh√¥ng c√≥ remote participants, b·∫Øt ƒë·∫ßu timer
            if (!autoEndTimerRef.current) {
                startAutoEndTimer();
            }
        } else {
            // C√≥ remote participants, d·ª´ng timer
            stopAutoEndTimer();
        }
    };

    // H√†m y√™u c·∫ßu quy·ªÅn truy c·∫≠p camera v√† mic v·ªõi retry logic
    const requestMediaPermissions = async (): Promise<boolean> => {
        try {
            console.log('üé• Requesting media permissions...');

            // Ki·ªÉm tra xem c√≥ permissions ch∆∞a
            const permissions = await navigator.permissions.query({ name: 'camera' as PermissionName });
            console.log('Camera permission status:', permissions.state);

            const stream = await navigator.mediaDevices.getUserMedia({
                video: {
                    width: { ideal: 1280 },
                    height: { ideal: 720 },
                    facingMode: 'user'
                },
                audio: {
                    echoCancellation: true,
                    noiseSuppression: true,
                    autoGainControl: true
                }
            });

            console.log('‚úÖ Media permissions granted, stream tracks:', stream.getTracks().map(t => t.kind));

            // D·ª´ng stream t·∫°m th·ªùi v√¨ LiveKit s·∫Ω t·ª± qu·∫£n l√Ω
            stream.getTracks().forEach(track => track.stop());

            return true;
        } catch (error) {
            console.error('‚ùå Error requesting media permissions:', error);
            if (error instanceof Error) {
                if (error.name === 'NotAllowedError') {
                    alert('Vui l√≤ng cho ph√©p truy c·∫≠p camera v√† microphone ƒë·ªÉ th·ª±c hi·ªán cu·ªôc g·ªçi');
                } else if (error.name === 'NotFoundError') {
                    alert('Kh√¥ng t√¨m th·∫•y camera ho·∫∑c microphone');
                } else if (error.name === 'NotReadableError') {
                    alert('Camera ho·∫∑c microphone ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ·ª©ng d·ª•ng kh√°c');
                }
            }
            return false;
        }
    };

    // Setup socket listeners
    useEffect(() => {
        if (!socket || !currentUserId) return;

        const handleIncomingCall = (callData: CallData) => {
            console.log('üìû Incoming call from:', callData.callerName);
            setIncomingCall(callData);
            setCallStatus('ringing');
        };

        const handleCallAccepted = async (callData: CallData) => {
            console.log('‚úÖ Call accepted, connecting to room:', callData.roomName);
            setCallStatus('connected');
        };

        const handleCallRejected = (data: { reason: string; message: string }) => {
            console.log('‚ùå Call rejected:', data.message);
            setCallStatus('rejected');
            setIncomingCall(null);

            // Set call end reason based on rejection reason
            const reasonMessages = {
                busy: 'Ng∆∞·ªùi d√πng ƒëang b·∫≠n',
                declined: 'Cu·ªôc g·ªçi b·ªã t·ª´ ch·ªëi',
                unavailable: 'Ng∆∞·ªùi d√πng kh√¥ng c√≥ s·∫µn'
            };
            setCallEndReason(reasonMessages[data.reason as keyof typeof reasonMessages] || 'Cu·ªôc g·ªçi kh√¥ng th√†nh c√¥ng');

            // Cleanup room n·∫øu c√≥
            if (roomRef.current) {
                roomRef.current.disconnect();
                roomRef.current = null;
                setRoom(null);
            }

            // D·ª´ng timer
            stopAutoEndTimer();

            // Reset sau 3 gi√¢y
            setTimeout(() => {
                setCallStatus('idle');
                setCallEndReason(null);
            }, 3000);
        };

        const handleCallEnded = (data: any) => {
            console.log('üìû Call ended by:', data.endedBy);
            if (data.reason === 'timeout') {
                setCallEndReason('Ng∆∞·ªùi d√πng ƒë√£ ng·∫Øt k·∫øt n·ªëi');
            } else if (data.reason === 'disconnect') {
                setCallEndReason('M·∫•t k·∫øt n·ªëi v·ªõi ng∆∞·ªùi d√πng');
            } else {
                setCallEndReason('Cu·ªôc g·ªçi ƒë√£ k·∫øt th√∫c');
            }
            endCall();
        };

        // Th√™m handler cho call timeout
        const handleCallTimeout = () => {
            console.log('‚è∞ Call timeout received from server');
            setAutoEndMessage('Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ ng∆∞·ªùi nh·∫≠n');
            setCallEndReason('Kh√¥ng c√≥ ph·∫£n h·ªìi');
            endCall('timeout');
        };

        socket.on('incomingCall', handleIncomingCall);
        socket.on('callAccepted', handleCallAccepted);
        socket.on('callRejected', handleCallRejected);
        socket.on('callEnded', handleCallEnded);
        socket.on('callTimeout', handleCallTimeout);

        // Listen for call status changes
        socket.on('callStatusChange', (data: { type: string; message?: string }) => {
            if (data.type === 'timeout') {
                setAutoEndMessage(data.message || 'Cu·ªôc g·ªçi ƒë√£ h·∫øt th·ªùi gian');
                setCallEndReason('H·∫øt th·ªùi gian ch·ªù');
                endCall('timeout');
            }
        });

        return () => {
            socket.off('incomingCall', handleIncomingCall);
            socket.off('callAccepted', handleCallAccepted);
            socket.off('callRejected', handleCallRejected);
            socket.off('callEnded', handleCallEnded);
            socket.off('callTimeout', handleCallTimeout);
            socket.off('callStatusChange');
        };
    }, [socket, currentUserId]);

    const setupRoomEvents = (roomInstance: Room) => {
        console.log('üè† Setting up room events...');

        roomInstance.on('connected', () => {
            console.log('‚úÖ Connected to LiveKit room');
            setConnectionState(ConnectionState.Connected);
            setIsInCall(true);
            setCallStatus('connected');
            callStartTimeRef.current = Date.now();

            setLocalParticipant(roomInstance.localParticipant);
            const remotes = Array.from(roomInstance.remoteParticipants.values());
            setRemoteParticipants(remotes);

            // B·∫Øt ƒë·∫ßu qu·∫£n l√Ω timer d·ª±a tr√™n s·ªë l∆∞·ª£ng remote participants
            manageAutoEndTimer(remotes.length);

            console.log(`üè† Room connected. Local: ${roomInstance.localParticipant.identity}, Remotes found: ${roomInstance.numParticipants}`);
        });

        roomInstance.on('disconnected', () => {
            console.log('‚ùå Disconnected from LiveKit room');
            setConnectionState(ConnectionState.Disconnected);
            setIsInCall(false);
            setLocalParticipant(null);
            setRemoteParticipants([]);
            stopAutoEndTimer();
        });

        roomInstance.on('participantConnected', (participant: RemoteParticipant) => {
            console.log('üë§ Participant connected:', participant.identity);
            setRemoteParticipants(prev => {
                const newParticipants = [...prev, participant];
                // D·ª´ng timer khi c√≥ ng∆∞·ªùi tham gia
                manageAutoEndTimer(newParticipants.length);
                return newParticipants;
            });
            setCallStatus('connected');
        });

        roomInstance.on('participantDisconnected', (participant: RemoteParticipant) => {
            console.log('üë§ Participant disconnected:', participant.identity);
            setRemoteParticipants(prev => {
                const newParticipants = prev.filter(p => p.identity !== participant.identity);
                // Qu·∫£n l√Ω timer d·ª±a tr√™n s·ªë l∆∞·ª£ng participants c√≤n l·∫°i
                manageAutoEndTimer(newParticipants.length);
                return newParticipants;
            });

            // Set reason when participant disconnects
            setCallEndReason('Ng∆∞·ªùi d√πng ƒë√£ r·ªùi cu·ªôc g·ªçi');
        });

        roomInstance.on('trackSubscribed', (track, publication, participant) => {
            console.log('üì° Track subscribed:', track.kind, 'from', participant.identity);
        });

        roomInstance.on('trackUnsubscribed', (track, publication, participant) => {
            console.log('üì° Track unsubscribed:', track.kind, 'from', participant.identity);
        });
    };

    const initiateCall = async (receiverId: string, receiverName: string) => {
        if (!socket) {
            console.error('‚ùå Socket not connected');
            return { success: false, error: 'Socket not connected' };
        }

        if (!currentUserId) {
            console.error('‚ùå Current user ID not available');
            return { success: false, error: 'User not authenticated' };
        }

        try {
            console.log('üìû Initiating call to:', receiverName, 'ID:', receiverId);
            setCallStatus('calling');
            setAutoEndMessage(null); // Reset message
            setCallEndReason(null); // Reset reason

            // Ki·ªÉm tra quy·ªÅn truy c·∫≠p media tr∆∞·ªõc
            const hasPermissions = await requestMediaPermissions();
            if (!hasPermissions) {
                setCallStatus('idle');
                return { success: false, error: 'Kh√¥ng th·ªÉ truy c·∫≠p camera/microphone' };
            }

            // G·ªçi API ƒë·ªÉ t·∫°o room v√† l·∫•y token
            console.log('üåê Calling API to create room...');
            const response = await fetch('/api/call/initiate', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    callerId: currentUserId,
                    receiverId,
                    callerName: receiverName
                })
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå API call failed:', response.status, errorText);
                throw new Error(`API call failed: ${response.status} ${errorText}`);
            }

            const { roomName, token, wsUrl } = await response.json();
            console.log('‚úÖ API response received:', { roomName, wsUrl: wsUrl ? 'present' : 'missing' });

            // T·∫°o room instance v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u
            const roomInstance = new Room({
                adaptiveStream: true,
                dynacast: true,
                videoCaptureDefaults: {
                    resolution: { width: 1280, height: 720 },
                    facingMode: 'user'
                },
                audioCaptureDefaults: {
                    echoCancellation: true,
                    noiseSuppression: true,
                    autoGainControl: true
                }
            });

            roomRef.current = roomInstance;
            setRoom(roomInstance);

            // Setup events tr∆∞·ªõc khi connect
            setupRoomEvents(roomInstance);

            console.log('üîó Connecting to LiveKit room...');
            setCallStatus('connecting');

            // Connect ƒë·∫øn room v·ªõi token
            await roomInstance.connect(wsUrl, token);
            console.log('‚úÖ Connected to LiveKit room successfully');

            // Set local participant sau khi connect th√†nh c√¥ng
            setLocalParticipant(roomInstance.localParticipant);

            // Enable camera v√† microphone v·ªõi retry logic
            try {
                console.log('üé• Enabling camera and microphone...');
                await roomInstance.localParticipant.enableCameraAndMicrophone();
                console.log('‚úÖ Camera and microphone enabled');
            } catch (enableError) {
                console.error('‚ùå Error enabling camera/microphone:', enableError);
                // Th·ª≠ enable t·ª´ng c√°i m·ªôt
                try {
                    await roomInstance.localParticipant.setMicrophoneEnabled(true);
                    await roomInstance.localParticipant.setCameraEnabled(true);
                    console.log('‚úÖ Camera and microphone enabled individually');
                } catch (individualError) {
                    console.error('‚ùå Failed to enable media individually:', individualError);
                }
            }

            // G·ª≠i th√¥ng b√°o cu·ªôc g·ªçi ƒë·∫øn receiver th√¥ng qua socket
            console.log('üì§ Sending call notification via socket...');
            socket.emit('initiateCall', {
                receiverId,
                callData: {
                    callerId: currentUserId,
                    receiverId,
                    callerName: receiverName,
                    roomName
                }
            });

            console.log('‚úÖ Call initiated successfully');
            return { success: true, roomName };

        } catch (error) {
            console.error('‚ùå Error initiating call:', error);
            setCallStatus('idle');
            setCallEndReason('Kh√¥ng th·ªÉ kh·ªüi t·∫°o cu·ªôc g·ªçi');

            // Cleanup room n·∫øu c√≥ l·ªói
            if (roomRef.current) {
                await roomRef.current.disconnect();
                roomRef.current = null;
                setRoom(null);
            }

            stopAutoEndTimer();

            return {
                success: false,
                error: error instanceof Error ? error.message : 'Failed to initiate call'
            };
        }
    };

    const acceptCall = async () => {
        if (!incomingCall || !socket) {
            console.error('‚ùå No incoming call or socket not connected');
            return { success: false, error: 'No incoming call' };
        }

        try {
            console.log('‚úÖ Accepting call from:', incomingCall.callerName);
            setCallStatus('connecting');
            setAutoEndMessage(null); // Reset message
            setCallEndReason(null); // Reset reason

            // Ki·ªÉm tra quy·ªÅn truy c·∫≠p media
            const hasPermissions = await requestMediaPermissions();
            if (!hasPermissions) {
                setCallEndReason('Kh√¥ng th·ªÉ truy c·∫≠p camera/microphone');
                rejectCall('unavailable');
                return { success: false, error: 'Kh√¥ng th·ªÉ truy c·∫≠p camera/microphone' };
            }

            // G·ªçi API ƒë·ªÉ l·∫•y token cho receiver
            const response = await fetch('/api/call/accept', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    receiverId: currentUserId,
                    roomName: incomingCall.roomName,
                    callerId: incomingCall.callerId
                })
            });

            if (!response.ok) {
                throw new Error('Failed to accept call');
            }

            const { token, wsUrl } = await response.json();

            // T·∫°o room instance m·ªõi cho receiver
            const roomInstance = new Room({
                adaptiveStream: true,
                dynacast: true,
                videoCaptureDefaults: {
                    resolution: { width: 1280, height: 720 },
                    facingMode: 'user'
                },
                audioCaptureDefaults: {
                    echoCancellation: true,
                    noiseSuppression: true,
                    autoGainControl: true
                }
            });

            roomRef.current = roomInstance;
            setRoom(roomInstance);

            // Setup events
            setupRoomEvents(roomInstance);

            // Connect ƒë·∫øn room
            await roomInstance.connect(wsUrl, token);

            // Set local participant sau khi connect
            setLocalParticipant(roomInstance.localParticipant);

            // Enable camera v√† microphone
            await roomInstance.localParticipant.enableCameraAndMicrophone();

            // Th√¥ng b√°o cho caller r·∫±ng call ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n
            socket.emit('acceptCall', {
                callerId: incomingCall.callerId,
                callData: {
                    ...incomingCall,
                    receiverId: currentUserId
                }
            });

            setIncomingCall(null);
            console.log('‚úÖ Call accepted successfully');
            return { success: true };

        } catch (error) {
            console.error('‚ùå Error accepting call:', error);
            setCallStatus('idle');
            setIncomingCall(null);
            setCallEndReason('Kh√¥ng th·ªÉ ch·∫•p nh·∫≠n cu·ªôc g·ªçi');

            // Cleanup room n·∫øu c√≥ l·ªói
            if (roomRef.current) {
                await roomRef.current.disconnect();
                roomRef.current = null;
                setRoom(null);
            }

            stopAutoEndTimer();

            return { success: false, error: 'Failed to accept call' };
        }
    };

    const rejectCall = (reason: 'busy' | 'declined' | 'unavailable' = 'declined') => {
        if (!incomingCall || !socket) return;

        console.log('‚ùå Rejecting call, reason:', reason);

        const reasonMessages = {
            busy: 'B·∫°n ƒëang b·∫≠n',
            declined: 'B·∫°n ƒë√£ t·ª´ ch·ªëi cu·ªôc g·ªçi',
            unavailable: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi'
        };

        setCallEndReason(reasonMessages[reason]);

        socket.emit('rejectCall', {
            callerId: incomingCall.callerId,
            reason
        });

        setIncomingCall(null);
        setCallStatus('idle');
        stopAutoEndTimer();

        // Reset reason after 3 seconds
        setTimeout(() => {
            setCallEndReason(null);
        }, 3000);
    };

    const endCall = async (reason?: 'timeout' | 'manual') => {
        console.log('üìû Ending call...', reason ? `Reason: ${reason}` : '');

        try {
            // Set reason if not already set
            if (!callEndReason) {
                if (reason === 'timeout') {
                    setCallEndReason('Cu·ªôc g·ªçi ƒë√£ h·∫øt th·ªùi gian');
                } else {
                    setCallEndReason('Cu·ªôc g·ªçi ƒë√£ k·∫øt th√∫c');
                }
            }

            // Cleanup room
            if (roomRef.current) {
                await roomRef.current.disconnect();
                roomRef.current = null;
            }

            // Stop timer
            stopAutoEndTimer();

            // Reset states
            setRoom(null);
            setIsInCall(false);
            setCallStatus(reason === 'timeout' ? 'timeout' : 'ended');
            setLocalParticipant(null);
            setRemoteParticipants([]);
            setConnectionState(ConnectionState.Disconnected);
            setIncomingCall(null);

            // Th√¥ng b√°o qua socket
            if (socket && currentUserId) {
                socket.emit('endCall', {
                    userId: currentUserId,
                    callData: {
                        endedBy: currentUserId,
                        reason: reason || 'manual'
                    }
                });
            }

            // Reset status sau v√†i gi√¢y
            setTimeout(() => {
                setCallStatus('idle');
                setAutoEndMessage(null);
                // Keep callEndReason for a bit longer to show in chat
                setTimeout(() => {
                    setCallEndReason(null);
                }, 2000);
            }, reason === 'timeout' ? 5000 : 2000);

            console.log('‚úÖ Call ended successfully');
        } catch (error) {
            console.error('‚ùå Error ending call:', error);
        }
    };

    // Cleanup khi component unmount
    useEffect(() => {
        return () => {
            if (roomRef.current) {
                roomRef.current.disconnect();
            }
            stopAutoEndTimer();
        };
    }, []);

    return {
        // States
        room,
        isInCall,
        incomingCall,
        callStatus,
        localParticipant,
        remoteParticipants,
        connectionState,
        autoEndMessage,
        callEndReason,

        // Actions
        initiateCall,
        acceptCall,
        rejectCall,
        endCall: () => endCall('manual')
    };
};